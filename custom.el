(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(add-log-time-format (quote xen-changelog-timestamp))
 '(ag-highlight-search t)
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(auto-hscroll-mode (quote current-line))
 '(auto-insert-mode t nil (autoinsert))
 '(backward-delete-char-untabify-method (quote all))
 '(browse-url-browser-function (quote browse-url-generic))
 '(browse-url-generic-program "sensible-browser")
 '(c-basic-offset (quote set-from-style))
 '(c-default-style
   (quote
    ((java-mode . "java")
     (awk-mode . "awk")
     (other . "psr2"))))
 '(comint-input-autoexpand t)
 '(company-auto-complete nil)
 '(company-backends
   (quote
    (company-elisp
     (php-extras-company company-dabbrev-code-xen company-gtags company-keywords :with company-yasnippet)
     company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-cmake company-capf
     (company-dabbrev-code-xen company-gtags company-etags company-keywords)
     company-oddmuse company-files company-dabbrev)))
 '(company-box-icons-alist (quote company-box-icons-all-the-icons))
 '(company-dabbrev-code-everywhere nil)
 '(company-idle-delay 0)
 '(company-lsp-cache-candidates t nil nil "Work around php-language-server not filtering and sorting hints. See https://github.com/tigersoldier/company-lsp/issues/79")
 '(company-minimum-prefix-length 2)
 '(company-require-match nil)
 '(company-search-regexp-function (quote company-search-words-in-any-order-regexp))
 '(company-show-numbers nil)
 '(company-tooltip-align-annotations t)
 '(company-tooltip-flip-when-above nil)
 '(company-tooltip-idle-delay 0)
 '(company-tooltip-limit 30)
 '(company-tooltip-minimum 20)
 '(company-transformers (quote (company-sort-by-occurrence xen-company-filter)))
 '(css-fontify-colors nil nil nil "Use rainbow-mode hacked to use overlays so it works nicely with hl-line")
 '(css-indent-offset 2)
 '(delete-selection-mode t nil (delsel))
 '(desktop-files-not-to-save "^/none[^/:]*:")
 '(desktop-restore-eager 3)
 '(desktop-save (quote ask-if-new))
 '(desktop-save-mode nil)
 '(echo-keystrokes 0.1)
 '(ediff-keep-variants nil)
 '(ediff-split-window-function (quote split-window-horizontally))
 '(ediff-use-last-dir t)
 '(editorconfig-indentation-alist
   (quote
    ((apache-mode apache-indent-level)
     (awk-mode c-basic-offset)
     (bpftrace-mode c-basic-offset)
     (c++-mode c-basic-offset)
     (c-mode c-basic-offset)
     (cmake-mode cmake-tab-width)
     (coffee-mode coffee-tab-width)
     (cperl-mode cperl-indent-level)
     (crystal-mode crystal-indent-level)
     (csharp-mode c-basic-offset)
     (css-mode css-indent-offset)
     (emacs-lisp-mode lisp-indent-offset)
     (enh-ruby-mode enh-ruby-indent-level)
     (erlang-mode erlang-indent-level)
     (ess-mode ess-indent-offset)
     (f90-mode f90-associate-indent f90-continuation-indent f90-critical-indent f90-do-indent f90-if-indent f90-program-indent f90-type-indent)
     (feature-mode feature-indent-offset feature-indent-level)
     (fsharp-mode fsharp-continuation-offset fsharp-indent-level fsharp-indent-offset)
     (groovy-mode groovy-indent-offset)
     (haskell-mode haskell-indent-spaces haskell-indent-offset haskell-indentation-layout-offset haskell-indentation-left-offset haskell-indentation-starter-offset haskell-indentation-where-post-offset haskell-indentation-where-pre-offset shm-indent-spaces)
     (haxor-mode haxor-tab-width)
     (idl-mode c-basic-offset)
     (jade-mode jade-tab-width)
     (java-mode c-basic-offset)
     (js-mode js-indent-level)
     (js-jsx-mode js-indent-level sgml-basic-offset)
     (js2-mode js2-basic-offset)
     (js2-jsx-mode js2-basic-offset sgml-basic-offset)
     (js3-mode js3-indent-level)
     (json-mode js-indent-level)
     (julia-mode julia-indent-offset)
     (kotlin-mode kotlin-tab-width)
     (latex-mode . editorconfig-set-indentation-latex-mode)
     (lisp-mode lisp-indent-offset)
     (livescript-mode livescript-tab-width)
     (lua-mode lua-indent-level)
     (matlab-mode matlab-indent-level)
     (mips-mode mips-tab-width)
     (mustache-mode mustache-basic-offset)
     (nasm-mode nasm-basic-offset)
     (nginx-mode nginx-indent-level)
     (nxml-mode nxml-child-indent
                (nxml-attribute-indent . 2))
     (objc-mode c-basic-offset)
     (octave-mode octave-block-offset)
     (perl-mode perl-indent-level)
     (php-mode c-basic-offset)
     (pike-mode c-basic-offset)
     (ps-mode ps-mode-tab)
     (pug-mode pug-tab-width)
     (puppet-mode puppet-indent-level)
     (python-mode . editorconfig-set-indentation-python-mode)
     (ruby-mode ruby-indent-level)
     (rust-mode rust-indent-offset)
     (scala-mode scala-indent:step)
     (scss-mode css-indent-offset)
     (sgml-mode sgml-basic-offset)
     (sh-mode sh-basic-offset sh-indentation)
     (slim-mode slim-indent-offset)
     (tcl-mode tcl-indent-level tcl-continued-indent-level)
     (terra-mode terra-indent-level)
     (typescript-mode typescript-indent-level)
     (verilog-mode verilog-indent-level verilog-indent-level-behavioral verilog-indent-level-declaration verilog-indent-level-module verilog-cexp-indent verilog-case-indent)
     (web-mode
      (web-mode-indent-style lambda
                             (size)
                             2)
      web-mode-attr-indent-offset web-mode-attr-value-indent-offset web-mode-code-indent-offset web-mode-css-indent-offset web-mode-markup-indent-offset web-mode-sql-indent-offset web-mode-block-padding web-mode-script-padding web-mode-style-padding)
     (yaml-mode yaml-indent-offset)
     (rjsx-mode js2-basic-offset sgml-basic-offset))) nil nil "Add rjsx-mode")
 '(expand-region-subword-enabled t)
 '(fci-rule-color "#282a2e")
 '(git-commit-mode-hook
   (quote
    (turn-on-auto-fill flyspell-mode git-commit-save-message yas-minor-mode)) t)
 '(hscroll-margin 15)
 '(indent-tabs-mode nil)
 '(indentinator-idle-time 0.005)
 '(inhibit-startup-screen t)
 '(jit-lock-stealth-time 10)
 '(js-indent-level 2)
 '(js2-strict-missing-semi-warning nil)
 '(line-move-visual nil)
 '(menu-bar-mode nil)
 '(mouse-avoidance-mode nil nil (avoid))
 '(mouse-sel-default-bindings t)
 '(mouse-sel-mode t)
 '(mouse-wheel-scroll-amount (quote (1 ((shift) . 5) ((control)))))
 '(mouse-yank-at-point t)
 '(org-agenda-files (quote ("~/Documents/Todo.org")))
 '(org-support-shift-select t)
 '(origami-parser-alist
   (quote
    ((java-mode . origami-c-style-parser)
     (c-mode . origami-c-style-parser)
     (php-mode . origami-c-style-parser)
     (c++-mode . origami-c-style-parser)
     (cperl-mode . origami-c-style-parser)
     (emacs-lisp-mode . origami-elisp-parser)
     (lisp-interaction-mode . origami-elisp-parser)
     (clojure-mode . origami-clj-parser))))
 '(password-cache-expiry 3600)
 '(query-replace-highlight t)
 '(recentf-max-saved-items 500)
 '(safe-local-variable-values (quote ((flycheck-emacs-lisp-load-path . inherit))) nil nil "Allow inherit for flycheck-emacs-lisp-load-path for my init.el.")
 '(scroll-bar-mode nil)
 '(scss-compile-at-save nil)
 '(sentence-end-double-space nil)
 '(server-temp-file-regexp "^\\(/tmp/Re\\|/draft\\)\\|/tmp/\\(rat\\.\\|mutt-\\).*$")
 '(set-mark-command-repeat-pop t)
 '(shift-select-mode nil)
 '(smex-save-file "/home/xen/.emacs.d/smex-items")
 '(sp-autodelete-closing-pair nil)
 '(sp-autodelete-opening-pair nil)
 '(sp-autodelete-pair nil)
 '(sp-autoskip-closing-pair (quote always))
 '(sp-show-pair-from-inside t)
 '(speedbar-fetch-etags-command "etags")
 '(speedbar-hide-button-brackets-flag nil)
 '(speedbar-ignored-modes nil)
 '(speedbar-show-unknown-files t)
 '(speedbar-supported-extension-expressions
   (quote
    ("\\.\\(inc\\|php[s34]?\\)" ".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".f\\(90\\|77\\|or\\)?" ".ada" ".pl" ".tcl" ".m" ".scm" ".pm" ".py" ".s?html" "Makefile\\(\\.in\\)?" ".p\\(hp\\(3\\|4\\)\\|html\\|hp\\)" ".module" ".install")))
 '(speedbar-track-mouse-flag t)
 '(speedbar-update-flag (quote x))
 '(straight-check-for-modifications (quote at-startup))
 '(switch-to-buffer-in-dedicated-window (quote prompt))
 '(tool-bar-mode nil nil (tool-bar))
 '(undo-tree-auto-save-history t)
 '(undo-tree-history-directory-alist (quote (("." . "/home/xen/.emacs.d/undo-history"))))
 '(undo-tree-visualizer-diff nil)
 '(undo-tree-visualizer-relative-timestamps t)
 '(undo-tree-visualizer-timestamps t)
 '(uniquify-after-kill-buffer-p t)
 '(uniquify-ask-about-buffer-names-p t)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(uniquify-trailing-separator-p t)
 '(url-cookie-confirmation (quote nil))
 '(url-honor-refresh-requests (quote t))
 '(url-privacy-level (quote (email)))
 '(user-mail-address "xen@xen.dk")
 '(vcl-indent-level 2)
 '(visual-fill-column-center-text t)
 '(vr/default-replace-preview t)
 '(vterm-max-scrollback 100000)
 '(wdired-allow-to-change-permissions t)
 '(yas-choose-keys-first nil)
 '(yas-choose-tables-first t)
 '(yas-fallback-behavior (quote call-other-command))
 '(yas-prompt-functions
   (quote
    (yas-dropdown-prompt yas-completing-prompt yas-ido-prompt yas-no-prompt)))
 '(yas-triggers-in-field t)
 '(yas-wrap-around-region nil))

(put 'narrow-to-region 'disabled nil)
