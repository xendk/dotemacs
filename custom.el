(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(add-log-time-format (quote xen-changelog-timestamp))
 '(ag-highlight-search t)
 '(ansi-color-faces-vector
   [default bold shadow italic underline bold bold-italic bold])
 '(ansi-color-names-vector
   (vector "#c5c8c6" "#cc6666" "#b5bd68" "#f0c674" "#81a2be" "#b294bb" "#8abeb7" "#1d1f21"))
 '(auto-indent-assign-indent-level-variables nil)
 '(auto-indent-blank-lines-on-move nil)
 '(auto-indent-next-pair nil)
 '(auto-insert-mode t nil (autoinsert))
 '(avy-background t)
 '(avy-keys
   (quote
    (97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122)))
 '(backward-delete-char-untabify-method (quote all))
 '(browse-url-browser-function (quote browse-url-generic))
 '(browse-url-generic-program "sensible-browser")
 '(c-basic-offset (quote set-from-style))
 '(c-default-style
   (quote
    ((java-mode . "java")
     (awk-mode . "awk")
     (other . "psr2"))))
 '(comint-input-autoexpand t)
 '(company-auto-complete nil)
 '(company-backends
   (quote
    (company-elisp
     (php-extras-company company-dabbrev-code-xen company-gtags company-keywords :with company-yasnippet)
     company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-cmake company-capf
     (company-dabbrev-code-xen company-gtags company-etags company-keywords)
     company-oddmuse company-files company-dabbrev)))
 '(company-dabbrev-code-everywhere nil)
 '(company-frontends
   (quote
    (company-pseudo-tooltip-unless-just-one-frontend-with-delay company-echo-metadata-frontend company-preview-frontend)))
 '(company-idle-delay 0)
 '(company-lsp-cache-candidates t nil nil "Work around php-language-server not filtering and sorting hints. See https://github.com/tigersoldier/company-lsp/issues/79")
 '(company-minimum-prefix-length 2)
 '(company-require-match nil)
 '(company-search-regexp-function (quote company-search-words-in-any-order-regexp))
 '(company-show-numbers nil)
 '(company-tooltip-align-annotations t)
 '(company-tooltip-flip-when-above nil)
 '(company-tooltip-idle-delay 0)
 '(company-tooltip-limit 30)
 '(company-tooltip-minimum 20)
 '(company-transformers (quote (company-sort-by-occurrence xen-company-filter)))
 '(css-indent-offset 2)
 '(custom-enabled-themes nil)
 '(custom-safe-themes
   (quote
    ("312d406efad37131050256bbfdfa0054b348b861a7ef40811afb4cc94e8eb2f9" "9e5dd5a4bacdbddcb30286e06638975a4f4e850b3e02957d55afce607360c1d0" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" default)))
 '(delete-selection-mode t nil (delsel))
 '(desktop-files-not-to-save "^/none[^/:]*:")
 '(desktop-restore-eager 3)
 '(desktop-save (quote ask-if-new))
 '(desktop-save-mode nil)
 '(drupal-ignore-paths-regexp
   "\\(vendor\\|node_modules\\|features/bootstrap\\|tests/behat\\|tests/codecept\\)")
 '(drupal/emacs-drush-update-tags-after-save t)
 '(drupal/phpcs-standard
   "/home/xen/.config/composer/vendor/drupal/coder/coder_sniffer/Drupal,/home/xen/.config/composer/vendor/drupal/coder/coder_sniffer/DrupalPractice")
 '(echo-keystrokes 0.1)
 '(ediff-keep-variants nil)
 '(ediff-split-window-function (quote split-window-horizontally))
 '(ediff-use-last-dir t)
 '(fci-rule-color "#282a2e")
 '(flycheck-disabled-checkers (quote (javascript-jshint)))
 '(flycheck-eslintrc nil)
 '(flycheck-mode-line (quote (:eval (xen-flycheck-mode-line-status-text))))
 '(flycheck-phpcs-standard "PSR2")
 '(flycheck-phpmd-rulesets (quote ("codesize" "design" "naming")))
 '(flycheck-scss-compass t)
 '(flymake-cursor-error-display-delay 0.3)
 '(flymake-cursor-number-of-errors-to-display 1)
 '(flyspell-default-dictionary nil)
 '(git-commit-mode-hook
   (quote
    (turn-on-auto-fill flyspell-mode git-commit-save-message yas-minor-mode)) t)
 '(highlight-symbol-idle-delay 0.5)
 '(hscroll-margin 15)
 '(indent-tabs-mode nil)
 '(indentinator-idle-time 0.005)
 '(inhibit-startup-screen t)
 '(ivy-count-format "(%d/%d) ")
 '(ivy-display-style (quote fancy))
 '(ivy-extra-directories nil)
 '(ivy-mode t)
 '(jit-lock-stealth-time 10)
 '(js-indent-level 2)
 '(js2-strict-missing-semi-warning nil)
 '(keyfreq-autosave-mode t)
 '(keyfreq-file "~/.emacs.d/keyfreq")
 '(keyfreq-file-lock "~/.emacs.d/keyfreq.lock")
 '(keyfreq-mode t)
 '(line-move-visual nil)
 '(load-prefer-newer t)
 '(lsp-clients-php-server-command
   (quote
    ("php" "/home/xen/.emacs.d/php-language-server/vendor/felixfbecker/language-server/bin/php-language-server.php")))
 '(lsp-log-max 1000)
 '(lsp-ui-flycheck-live-reporting nil nil nil "Letting flycheck perform check rather than wait for lsp to trigger it, performs better.")
 '(magit-completing-read-function (quote ivy-completing-read))
 '(magit-display-buffer-function (quote magit-display-buffer-fullframe-status-v1))
 '(magit-fetch-arguments (quote ("--prune")))
 '(magit-push-always-verify nil)
 '(magit-revert-buffers t t)
 '(magit-save-repository-buffers (quote dontask))
 '(magit-status-buffer-switch-function (quote switch-to-buffer))
 '(magit-use-sticky-arguments (quote current))
 '(menu-bar-mode nil)
 '(mode-line-format
   (quote
    ("%e" mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position "  " mode-line-modes mode-line-misc-info mode-line-end-spaces)))
 '(mouse-avoidance-mode (quote animate) nil (avoid))
 '(mouse-sel-default-bindings t)
 '(mouse-sel-mode t)
 '(mouse-wheel-scroll-amount (quote (1 ((shift) . 5) ((control)))))
 '(mouse-yank-at-point t)
 '(multi-term-switch-after-close nil)
 '(org-agenda-files (quote ("~/Documents/Todo.org")))
 '(org-support-shift-select t)
 '(origami-parser-alist
   (quote
    ((java-mode . origami-c-style-parser)
     (c-mode . origami-c-style-parser)
     (php-mode . origami-c-style-parser)
     (c++-mode . origami-c-style-parser)
     (cperl-mode . origami-c-style-parser)
     (emacs-lisp-mode . origami-elisp-parser)
     (lisp-interaction-mode . origami-elisp-parser)
     (clojure-mode . origami-clj-parser))))
 '(password-cache-expiry 3600)
 '(php-extras-auto-complete-insert-parenthesis nil)
 '(php-file-patterns
   (quote
    ("\\.php[s34]?\\'" "\\.phtml\\'" "\\.inc\\'" "\\.module\\'")))
 '(php-mode-coding-style (quote psr2))
 '(php-mode-enable-project-coding-style nil)
 '(projectile-cache-file "~/.emacs.d/.projectile.cache")
 '(projectile-completion-system (quote ivy))
 '(projectile-known-projects-file "~/.emacs.d/.projectile-bookmarks.eld")
 '(projectile-switch-project-action (quote projectile-vc))
 '(query-replace-highlight t)
 '(recentf-max-saved-items 500)
 '(safe-local-variable-values (quote ((flycheck-emacs-lisp-load-path . inherit))) nil nil "Allow inherit for flycheck-emacs-lisp-load-path for my init.el.")
 '(save-place-file "/home/xen/.emacs.d/saveplaces")
 '(scroll-bar-mode nil)
 '(scss-compile-at-save nil)
 '(sentence-end-double-space nil)
 '(server-temp-file-regexp "^\\(/tmp/Re\\|/draft\\)\\|/tmp/\\(rat\\.\\|mutt-\\).*$")
 '(set-mark-command-repeat-pop t)
 '(shift-select-mode nil)
 '(smex-save-file "/home/xen/.emacs.d/smex-items")
 '(sp-autodelete-closing-pair nil)
 '(sp-autodelete-opening-pair nil)
 '(sp-autodelete-pair nil)
 '(sp-autoskip-closing-pair (quote always))
 '(sp-show-pair-from-inside t)
 '(speedbar-fetch-etags-command "etags")
 '(speedbar-hide-button-brackets-flag nil)
 '(speedbar-ignored-modes nil)
 '(speedbar-show-unknown-files t)
 '(speedbar-supported-extension-expressions
   (quote
    ("\\.\\(inc\\|php[s34]?\\)" ".[ch]\\(\\+\\+\\|pp\\|c\\|h\\|xx\\)?" ".tex\\(i\\(nfo\\)?\\)?" ".el" ".emacs" ".l" ".lsp" ".p" ".java" ".f\\(90\\|77\\|or\\)?" ".ada" ".pl" ".tcl" ".m" ".scm" ".pm" ".py" ".s?html" "Makefile\\(\\.in\\)?" ".p\\(hp\\(3\\|4\\)\\|html\\|hp\\)" ".module" ".install")))
 '(speedbar-track-mouse-flag t)
 '(speedbar-update-flag (quote x))
 '(straight-check-for-modifications (quote at-startup))
 '(switch-to-buffer-in-dedicated-window (quote prompt))
 '(term-bind-key-alist
   (quote
    (("C-c C-c" . term-interrupt-subjob)
     ("C-c C-e" . term-send-esc)
     ("C-p" . previous-line)
     ("C-n" . next-line)
     ("C-s" . isearch-forward)
     ("C-r" . term-send-reverse-search-history)
     ("C-m" . term-send-return)
     ("C-y" . term-paste)
     ("M-f" . term-send-forward-word)
     ("M-b" . term-send-backward-word)
     ("M-o" . term-send-backspace)
     ("M-p" . term-send-up)
     ("M-n" . term-send-down)
     ("<C-backspace>" . term-send-backward-kill-word)
     ("M-d" . term-send-delete-word)
     ("M-," . term-send-raw)
     ("M-." . comint-dynamic-complete)
     ("<M-up>" . term-send-alt-up)
     ("<M-down>" . term-send-alt-down)
     ("<M-left>" . term-send-alt-left)
     ("<M-right>" . term-send-alt-right)
     ("<C-left>" . term-send-ctrl-left)
     ("<C-right>" . term-send-ctrl-right)
     ("<M-backspace>" . term-send-alt-backspace)
     ("<M-delete>" . term-send-delete-word)
     ("C-<tab>" . term-swiper)
     ("<S-SPC>" . term-avy-goto-word-1)
     ("M-l" . term-xen-avy-goto-line)
     ("C-c C-y" . term-send-yank))))
 '(term-unbind-key-list (quote ("C-z" "C-x" "C-c" "C-h" "C-y" "<ESC>")))
 '(tool-bar-mode nil nil (tool-bar))
 '(undo-tree-auto-save-history t)
 '(undo-tree-history-directory-alist (quote (("." . "/home/xen/.emacs.d/undo-history"))))
 '(undo-tree-visualizer-diff nil)
 '(undo-tree-visualizer-relative-timestamps t)
 '(undo-tree-visualizer-timestamps t)
 '(uniquify-after-kill-buffer-p t)
 '(uniquify-ask-about-buffer-names-p t)
 '(uniquify-buffer-name-style (quote post-forward-angle-brackets) nil (uniquify))
 '(uniquify-trailing-separator-p t)
 '(url-cookie-confirmation (quote nil))
 '(url-honor-refresh-requests (quote t))
 '(url-privacy-level (quote (email)))
 '(use-package-verbose t)
 '(user-mail-address "xen@xen.dk")
 '(vcl-indent-level 2)
 '(vr/default-replace-preview t)
 '(yas-choose-keys-first nil)
 '(yas-choose-tables-first t)
 '(yas-fallback-behavior (quote call-other-command))
 '(yas-prompt-functions
   (quote
    (yas-dropdown-prompt yas-completing-prompt yas-ido-prompt yas-no-prompt)))
 '(yas-triggers-in-field t)
 '(yas-wrap-around-region nil))

(put 'narrow-to-region 'disabled nil)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
