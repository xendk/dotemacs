Handy trick:
(set-face-attribute 'default nil :height 140)

Handy variables for line (non-)wrapping:
truncate-lines
word-wrap
Also, look into adaptive-wrap (mentioned here: http://emacswiki.org/emacs/LineWrap )

Power replacement:        
(map-query-replace-regexp)

Quick debugging: (toggle-debug-on-error)

Function debugging: (trace-function)

Use re-builder for interactive regexp building.

isearch:
 M-r    isearch-toggle-regexp
 M-e    isearch-edit-string
 C-M-%  isearch-query-replace-regexp
 M-%    isearch-query-replace

visual-regexp:
 C-c r  vr/replace
 C-c q  vr/query-replace
 C-c m  vr/mc-mark

 Remove empty lines in region:
 M-x flush-lines RET ^\s-*$ RET

 C-x r m  Set bookmark
 C-x r l  List bookmarks

Reread the Emacs Lisp Coding Conventions once in a while
https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-Conventions.html

Movement:

M-< beginning-of-buffer
M-> end-of-buffer
C-M-f           forward-sexp (also C-M-right)
C-M-b           backward-sexp (also C-M-left)
C-M-d           down-list
C-M-n           forward-list
C-M-p           backward-list
C-u C-SPC       (pop-mark)

The Emacs Package Developer's Handbook
https://alphapapa.github.io/emacs-package-dev-handbook/

' is shorthand for (quote)
#' is shorthand for (function)

The latter does the same as the first, but tells the compiler that
it's a function. Lambdas have one implicitly.

M-x speed-type-text

C-S-backspace    kill-whole-line

In isearch:
M-e     edit string
M-s .   search for symbol under point

M-x transpose-regions

Also available on region embark

Reread Bbatsovs coding style guide:
https://github.com/bbatsov/emacs-lisp-style-guide

M-x ielm

Iteractive elisp

crystal-mode:

C-c '    crystal-toggle-string-quotes
C-c {    crystal-toggle-block

crystal-spec-switch


display-buffer-alist controls how buffers is displayed.

Displaying a Buffer in a Suitable Window:
https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Buffers.html

multiple-cursors:
C-' mc-hide-unmatched-lines-mode
    mc/edit-lines
C-=     mc/mark-all-like-this-dwim
        Marks thing at point in defun, subsequently in buffer.
M-x mel mc/edit-lines
M-x mmp mc/mark-pop
M-x min mc/insert-numbers
        Takes prefix arg.
M-x msr mc/sort-regions
M-x mva mc/vertical-align (or mc/vertical-align-with-space)
C-x r y yank-rectangle
        Yanks all regions copied in mc mode.

Check what macro expands to:

emacs-lisp-macroexpand


C-x * e  calc-embedded-mode


Progfolios update rutine:

1.  elpaca-fetch-all

2. In the *elpaca-log* buffer, enable elpaca-log-update-mode. This
   will automatically show the diff for the commit at point in another
   window.

3. Read each commit message and use scroll-other-window commands to
   review the changes without leaving the log buffer. If I'm satisfied
   with the changes, I mark the package for merging by pressing 'm' in
   the log buffer and move on to the next one. If not, I just skip to
   the next package.

5. Once all packages are complete, I hit 'x' in the log buffer to
   execute the merges and have the packages rebuilt.
